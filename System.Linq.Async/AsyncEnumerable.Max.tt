<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace System.Linq.Async
{
    public static partial class AsyncEnumerable
    {
<#
foreach (var t in new[]
{
    "int",
    "long",
    "float",
    "double",
    "decimal",
})
{
    var nanCheck = "";
    if (t == "float" || t == "double")
    {
        nanCheck = " || " + t + ".IsNaN(item)";
    }
#>
        public static Task<<#=t#>> MaxAsync(this IAsyncEnumerable<<#=t#>> source, CancellationToken token = default)
        {
            if (source == null)
                throw new ArgumentNullException(nameof(source));

            return Core();

            async Task<<#=t#>> Core()
            {
                token.ThrowIfCancellationRequested();

                <#=t#> max = default;
                bool hasValue = false;

                foreach await (var item in source.ConfigureAwait(false))
                {
                    token.ThrowIfCancellationRequested();

                    if (hasValue)
                    {
                        if (item > max<#=nanCheck#>)
                        {
                            max = item;
                        }
                    }
                    else
                    {
                        hasValue = true;
                        max = item;
                    }
                }

                if (!hasValue)
                {
                    throw new InvalidOperationException();
                }

                return max;
            }
        }

<#
}
#>
<#
foreach (var t in new[]
{
    "int",
    "long",
    "float",
    "double",
    "decimal",
})
{
#>
        public static Task<<#=t#>?> MaxAsync(this IAsyncEnumerable<<#=t#>?> source, CancellationToken token = default)
        {
            if (source == null)
                throw new ArgumentNullException(nameof(source));

            return Core();

            async Task<<#=t#>?> Core()
            {
                token.ThrowIfCancellationRequested();

                <#=t#>? max = default;

                foreach await (var item in source.ConfigureAwait(false))
                {
                    token.ThrowIfCancellationRequested();

<#
if (t == "float" || t == "double")
{
#>
                    if (item.HasValue && (!max.HasValue || item > max || <#=t#>.IsNaN(item.Value)))
<#
}
else
{
#>
                    if (!max.HasValue || item > max)
<#
}
#>
                    {
                        max = item;
                    }
                }

                return max;
            }
        }

<#
}
#>
<#
foreach (var t in new[]
{
    "int",
    "long",
    "float",
    "double",
    "decimal",
})
{
#>
        public static Task<<#=t#>> MaxAsync<TSource>(this IAsyncEnumerable<TSource> source, Func<TSource, <#=t#>> selector, CancellationToken token = default) => source.Select(selector).MaxAsync(token);

        public static Task<<#=t#>> MaxAsync<TSource>(this IAsyncEnumerable<TSource> source, Func<TSource, ValueTask<<#=t#>>> selector, CancellationToken token = default) => source.Select(selector).MaxAsync(token);

        public static Task<<#=t#>?> MaxAsync<TSource>(this IAsyncEnumerable<TSource> source, Func<TSource, <#=t#>?> selector, CancellationToken token = default) => source.Select(selector).MaxAsync(token);

        public static Task<<#=t#>?> MaxAsync<TSource>(this IAsyncEnumerable<TSource> source, Func<TSource, ValueTask<<#=t#>?>> selector, CancellationToken token = default) => source.Select(selector).MaxAsync(token);

<#
}
#>
    }
}
